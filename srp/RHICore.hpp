#include "RHICommon.hpp"

namespace RHI
{

    struct RHIRect
    {
        LONG left;
        LONG top;
        LONG right;
        LONG bottom;
    };

    struct RHI_SUBRESOURCE_DATA
    {
        const void *pData;
        INT64 RowPitch;
        INT64 SlicePitch;
    };

    typedef 
    enum RHI_RESOURCE_STATES
    {
        RHI_RESOURCE_STATE_COMMON	= 0,
        RHI_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= 0x1,
        RHI_RESOURCE_STATE_INDEX_BUFFER	= 0x2,
        RHI_RESOURCE_STATE_RENDER_TARGET	= 0x4,
        RHI_RESOURCE_STATE_UNORDERED_ACCESS	= 0x8,
        RHI_RESOURCE_STATE_DEPTH_WRITE	= 0x10,
        RHI_RESOURCE_STATE_DEPTH_READ	= 0x20,
        RHI_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE	= 0x40,
        RHI_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	= 0x80,
        RHI_RESOURCE_STATE_STREAM_OUT	= 0x100,
        RHI_RESOURCE_STATE_INDIRECT_ARGUMENT	= 0x200,
        RHI_RESOURCE_STATE_COPY_DEST	= 0x400,
        RHI_RESOURCE_STATE_COPY_SOURCE	= 0x800,
        RHI_RESOURCE_STATE_RESOLVE_DEST	= 0x1000,
        RHI_RESOURCE_STATE_RESOLVE_SOURCE	= 0x2000,
        RHI_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE	= 0x400000,
        RHI_RESOURCE_STATE_SHADING_RATE_SOURCE	= 0x1000000,
        RHI_RESOURCE_STATE_GENERIC_READ	= ( ( ( ( ( 0x1 | 0x2 )  | 0x40 )  | 0x80 )  | 0x200 )  | 0x800 ) ,
        RHI_RESOURCE_STATE_ALL_SHADER_RESOURCE	= ( 0x40 | 0x80 ) ,
        RHI_RESOURCE_STATE_PRESENT	= 0,
        RHI_RESOURCE_STATE_PREDICATION	= 0x200,
    } 	RHI_RESOURCE_STATES;
    // DEFINE_ENUM_FLAG_OPERATORS( RHI_RESOURCE_STATES );


}
